<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Levin-lee</title>
  
  <subtitle>Levin-lee的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-18T08:00:38.700Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Levin lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/09/18/hello-world/"/>
    <id>http://yoursite.com/2020/09/18/hello-world/</id>
    <published>2020-09-18T08:00:38.700Z</published>
    <updated>2020-09-18T08:00:38.700Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux之shell</title>
    <link href="http://yoursite.com/2020/08/25/linux%E4%B9%8Bshell/"/>
    <id>http://yoursite.com/2020/08/25/linux%E4%B9%8Bshell/</id>
    <published>2020-08-25T12:08:03.000Z</published>
    <updated>2020-10-11T12:57:11.605Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>$# 是传给脚本的参数个数<br>$0 是脚本本身的名字<br>$1 是传递给该shell脚本的第一个参数<br>$2 是传递给该shell脚本的第二个参数<br>$@ 是传给脚本的所有参数的列表<br>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</p><p>$$ 是脚本运行的当前进程ID号<br>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</p></blockquote><h2 id="1-if-then语句"><a href="#1-if-then语句" class="headerlink" title="1. if-then语句"></a>1. if-then语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if test command</span><br><span class="line">then commands</span><br><span class="line">else commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>test检测：<br>数字<br>n1 -eq n2 检查n1是否与n2相等<br>n1 -ge n2 检查n1是否大于或等于n2<br>n1 -gt n2 检查n1是否大于n2<br>n1 -le n2 检查n1是否小于或等于n2<br>n1 -lt n2 检查n1是否小于n2<br>n1 -ne n2 检查n1是否不等于n2</p><p>字符串<br>-n str1 检查str1的长度是否非0<br>-z str1 检查str1的长度是否为0</p><h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for var in list do</span><br><span class="line">commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;“states”</span><br><span class="line">IFS&#x3D;$&#39;\n’   #能读空行的值</span><br><span class="line">for state in $(cat $file)</span><br><span class="line">do</span><br><span class="line">   echo &quot;Visit beautiful $state&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><br>跳出循环：break、continue</p><h2 id="3-创建函数"><a href="#3-创建函数" class="headerlink" title="3. 创建函数"></a>3. 创建函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function name &#123; commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h1><h2 id="4-sed命令"><a href="#4-sed命令" class="headerlink" title="4. sed命令"></a>4. sed命令</h2><p>Sed编辑器被称为流编辑器，与普通的交互式文本编辑器想法。<br>1）在命令行定义编辑器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Echo “this is a test” | sed ’s&#x2F;test&#x2F;big test’</span><br></pre></td></tr></table></figure><br>This is a big test<br>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sed ’s&#x2F;dog&#x2F;cat&#x2F;‘ data.txt</span><br></pre></td></tr></table></figure><br>Sed编辑器并不会修改文本文件的数据<br>2）在命令行使用多个编辑器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sed -e ’s&#x2F;brown&#x2F;green&#x2F;; s&#x2F;dog&#x2F;cat’ data.txt</span><br></pre></td></tr></table></figure><br>必须要用；分割<br>3）从文件中读取编辑器命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sed -f script1.sed datat.txt</span><br></pre></td></tr></table></figure><br>4）写入文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sed ‘1,2w test.txt’ datat.txt</span><br></pre></td></tr></table></figure><br>将test.txt文件的前两行打印到data.txt文件中</p><p>5、awk命令<br>1）格式化输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;&#123;printf &quot;%-8s %-10s\n&quot;,$1,$4&#125;&#39; log.txt</span><br><span class="line">&#96;&#96;</span><br><span class="line">2）使用，分割</span><br><span class="line">&#96;&#96;&#96;linux</span><br><span class="line">awk &#39;BEGIN&#123;FS&#x3D;&quot;,&quot;&#125; &#123;print $1,$2&#125;&#39;  log.txt</span><br></pre></td></tr></table></figure><br>3）条件语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;BEGIN &#123;</span><br><span class="line">    num &#x3D; 11; </span><br><span class="line">    if (num % 2 &#x3D;&#x3D; 0) printf &quot;%d 是偶数\n&quot;, num; </span><br><span class="line">    else printf &quot;%d 是奇数\n&quot;, num </span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      学习shell的一些笔记
    
    </summary>
    
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>投资观</title>
    <link href="http://yoursite.com/2020/08/21/%E6%8A%95%E8%B5%84%E8%A7%82/"/>
    <id>http://yoursite.com/2020/08/21/%E6%8A%95%E8%B5%84%E8%A7%82/</id>
    <published>2020-08-21T12:00:15.000Z</published>
    <updated>2020-08-21T12:01:31.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>人的一生都是不断投资自己的一个过程，投资是一辈子的事情，任何人都应该去学会投资。这里的投资并不是狭隘地指投资股票、债券等二级市场的行为，它也可以掌握理财或者更单纯地投资自己，花费时间看我一本书是投资、投入精力学习一项新技术也是投资。对于投资，我有几点想法，可以和大家一起交流。</p><h2 id="1、任何时候，投资的首要目标都是先投资自己"><a href="#1、任何时候，投资的首要目标都是先投资自己" class="headerlink" title="1、任何时候，投资的首要目标都是先投资自己"></a>1、任何时候，投资的首要目标都是先投资自己</h2><p>为什么投资的首要目标是投资自己？不要认为投资都是将钱投到金融市场中，投资自己比其他任何投资都更有意义。那么该如何正确投资自己，每天保持不断学习，付出时间和精力，每天坚持看几本书，培养自己的兴趣爱好，和喜欢的人交谈，花钱培养一项新技能，这些都是可以让你受益匪浅的投资，将会伴随你的一生。任何适合，投资自己永远是一项正确的决定。投资自己，永远不要怕多晚。</p><h2 id="2、不断学习、努力工作"><a href="#2、不断学习、努力工作" class="headerlink" title="2、不断学习、努力工作"></a>2、不断学习、努力工作</h2><p>学习是最有价值的一项投资，这是一条准则。古今中外，莫不如是。不会学习的人，只会固步自封，止步不前，只停留在同一层思想到老，是很可悲的一件事。学习不仅可以使我们获得前人宝贵的经验，也可以让我们规避他们所犯过的错误，所谓以史明鉴。</p><p>现在的我们工作是为了获取原始的积累，只有足够的原始积累，你才能有资本去做你想做的事情。现在你努力工作是为了更好的明天。别抱怨工作，学会去接受它、喜欢它，或许你也可以在工作上实现你人生的价值。</p><h2 id="3、构建适合自己的投资逻辑"><a href="#3、构建适合自己的投资逻辑" class="headerlink" title="3、构建适合自己的投资逻辑"></a>3、构建适合自己的投资逻辑</h2><p>投资的门派很多，根据金融市场不同可以分为一级市场的PE、VC，和二级市场流通市场；根据产品的不同可以分为债券、股票、汇率、期权、期货等派别；按照投资行为又分为投资者、投机者、套利者。在这纷扰繁杂的金融市场中，要构建属于自己的投资逻辑，形成自己的投资理念，否则随波逐流投机赚的钱，总又一天会以同样的形式流出。</p><h2 id="4、付诸实践，不断试错"><a href="#4、付诸实践，不断试错" class="headerlink" title="4、付诸实践，不断试错"></a>4、付诸实践，不断试错</h2><p>有人说，“年轻人要用于去尝试，不要害怕出错；到老了，犯错误的成本就会很高”。这句话是很有道理的，尤其是在投资界。年轻时，你的资本比较小，亏损了大不了，你还可以重新来过，你还年轻，还有大把的时间可以奋斗，但是当你老了，你已经没有能力或者精力去靠工作赚钱，这时候投资发生损失对于老年生活质量会大大打个折扣。所以，趁年轻，不断去试错，从失败中汲起教训，要么早点认清自己不适合投资，将时间放在更有价值、更合适的地方；要么坚持下去，不断修正自己的投资，完善投资框架，体验投资给你带来的财富增值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="投资" scheme="http://yoursite.com/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>我的北漂</title>
    <link href="http://yoursite.com/2020/08/21/%E6%88%91%E7%9A%84%E5%8C%97%E6%BC%82/"/>
    <id>http://yoursite.com/2020/08/21/%E6%88%91%E7%9A%84%E5%8C%97%E6%BC%82/</id>
    <published>2020-08-21T11:50:42.000Z</published>
    <updated>2020-10-11T12:53:53.601Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最初开通github是打算写点技术文章，现在更像是我的记事本，时不时也需要记录下我对生活的感悟。<br>谈到北漂，以前一直以为与我无关，是很虚无飘渺的东西，因为我的目标城市是深圳或者上海。没想到阴差阳错最终来到北京。从去年19年的7月开始，我正式开启了我的北漂之旅，再过两个月就整整一年了。在这里我挥洒汗水，耗费青春的光阴而碌碌无为，忙忙碌碌且无成长，我常痛恨这样的自己。</p><h2 id="工作篇"><a href="#工作篇" class="headerlink" title="-工作篇-"></a>-工作篇-</h2><p>我工作的地方是被誉为中国互联网届的摇篮村，名叫后场村。我居住的地方也是人均程序员密度最高的西二旗。和我一起居住的还有我的两个研究生同学，和一个同事。另外还有一个是我校友的同事，一共五个人同租，后来成为我校友的女朋友，那是后话了。刚开始工作的三个月中，确实我成长最快的时候，这里要实名感谢@彩旭对我的帮助，我要是有计算机的问题基本都去找他，他也乐意帮忙，在他的帮助下，我才能快速上手linux，这个博客也是在他的影响下而开通的。而在业务层面，@子鹏对我的帮助较大。总之，前三个月是成长最快的时候，后续的工作其实都是在重复工作，没有自己的想法，只是一味地执行领导交代的任务。刚来这家公司最让我不习惯的是，内部没有很明确对校招生的培养机制，前辈写分享文档的也很少，所以需要自己一点点去琢磨，我想要是部门有完善的培养机制，应该能让我更快地上手吧。还有一个让我比较诡异的事情是。内部的分享沟通会很少，每个小组都在埋头干自己的工作，小组之间比较少交流，而且甚至部分小组藏着掖着，不想让其他组知道自己所做的事情，其他小组也无从介入，以保证自己的一个项目的绝对领导地位。<br>其他方面，由于部门是风控部门，是整个信贷产品的核心。所以，接触的面会广一些，会进行跨部门协同。这一块，需要不断地扯皮，才能推动业务进展，不过这一块，我想其他公司也该差不多吧。<br>公司的问题之下，也同时暴露了我的问题了，在工作中很粗心，经常计算出错，对待工作比较散漫，效率低下。这一块还是需要不断地磨合自己，历练自己。</p><h2 id="生活篇"><a href="#生活篇" class="headerlink" title="-生活篇-"></a>-生活篇-</h2><p>前面谈到我们是5个人同租房子。正所谓有人的地方就有江湖，从一开始的其乐融融，一片欢声笑语，到最后充满矛盾，相见无言，前后不超过2个月。这一切的导火索就是其中两人相恋了，矛盾不可避免地出现了。比如，本来约好5个人一起吃饭和游玩的计划。因为这对恋人私下约会而泡汤；又如，处于热恋期的两人常常在客厅聊至凌晨两三点，我们受其困扰，辗转难眠。从一开始的时候，搭伙煮饭，到最后分为三个团体，时间协调也是矛盾重重，所幸，我基本只点外卖。到最后，我悟出了一个道理，千万别和情侣一起合租。</p><p>十一将至，各种生活工作都开始稳定，就出现了一件大事，由于我们是5人合租，其中有两间是隔断房。而正值十一期间，北京严查隔断出租屋，导致大量中介的隔断房被拆除，我们门口就贴着一张隔断房拆除的通知。当时我们5人的关系还算不错，不像现在这样撕破脸都无所畏惧。我们惶恐不已，要是隔断房被拆除，无法再找个房子可以5个人合租在一起。为此我们不断地和房东沟通和交流，甚至做好了重新找房的准备。后来虽然证明这种担心是徒劳的，但我们还是费了不少心血在这上面。不过，我想我以后应该不会再租隔断房了。</p><h2 id="个人篇"><a href="#个人篇" class="headerlink" title="-个人篇-"></a>-个人篇-</h2><p>生活总是充满了各种感悟，北漂将近一年，已打算背起行囊，重新出发。<br><img src= "/img/loading.gif" data-lazy-src="/img/beauty.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      介绍我一年的北漂生活
    
    </summary>
    
    
    
      <category term="北漂" scheme="http://yoursite.com/tags/%E5%8C%97%E6%BC%82/"/>
    
  </entry>
  
  <entry>
    <title>python高级编程</title>
    <link href="http://yoursite.com/2020/08/21/python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/08/21/python%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</id>
    <published>2020-08-21T11:32:32.000Z</published>
    <updated>2020-08-21T11:36:15.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、filter函数-过滤"><a href="#1、filter函数-过滤" class="headerlink" title="1、filter函数-过滤"></a>1、filter函数-过滤</h2><p>可以查看下面的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">-5</span>,<span class="number">3</span>,<span class="number">-7</span>,<span class="number">6</span>]</span><br><span class="line">after_filter = map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,filter(<span class="keyword">lambda</span> x:x&gt;<span class="number">0</span>,num))</span><br><span class="line">print(after_filter)</span><br></pre></td></tr></table></figure><br>当然，也可以用python自带的迭代器,可以达到一样的效果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">after_filter = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> num <span class="keyword">if</span> x&gt;<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>此外，还可以使用生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squre_generator</span><span class="params">(parameter)</span>:</span></span><br><span class="line">    rerurn(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> num <span class="keyword">if</span> x&gt;parameter)</span><br><span class="line">g = list(squre_generator(<span class="number">0</span>))</span><br></pre></td></tr></table></figure></p><h2 id="2、装饰器"><a href="#2、装饰器" class="headerlink" title="2、装饰器"></a>2、装饰器</h2><p>装饰器为我们提供了一个增加已有函数或类的功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">      start = time.time()</span><br><span class="line">      result = func(*args,**kwargs)</span><br><span class="line">      end = time.time()</span><br><span class="line">      print(func.__name__,end-start)</span><br><span class="line">      <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">    n-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">countdown(<span class="number">10000</span>)</span><br></pre></td></tr></table></figure></p><h2 id="3、和和xx-的区别"><a href="#3、和和xx-的区别" class="headerlink" title="3、和和xx_的区别"></a>3、<em>和和xx_</em>的区别</h2><h3 id="1）“-”单下划线"><a href="#1）“-”单下划线" class="headerlink" title="1）“_”单下划线"></a>1）“_”单下划线</h3><p>可以在类的方法或属性前加一个“_”单下划线，意味着该方法或属性不应该去调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_method</span><span class="params">(self)</span>:</span> </span><br><span class="line">        print(<span class="string">'约定为不在类的外面直接调用这个方法，但是也可以调用’) </span></span><br><span class="line"><span class="string">    def method(self): </span></span><br><span class="line"><span class="string">        return self._method() </span></span><br><span class="line"><span class="string">a = A()</span></span><br></pre></td></tr></table></figure><br>在类A中定义了一个_method方法，按照约定是不能在类外面直接调用它的，为了可以在外面使用_method方法，又定义了method方法，method方法调用_method方法。请看代码演示：<br>a._method() 不建议在类的外面直接调用这个方法，但是也可以调用。最好是a.method()</p><h3 id="2）双”-”下划线"><a href="#2）双”-”下划线" class="headerlink" title="2）双”__”下划线"></a>2）双”__”下划线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'This is a method from class A'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__method()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'This is a method from calss B'</span>)</span><br></pre></td></tr></table></figure><p>在类A中，method方法其实由于name mangling技术的原因，变成了_Amethod，所以在A中method方法返回的是_Amethod，B作为A的子类，只重写了method方法，并没有重写method方法，所以调用B中的method方法时，调用的还是_Amethod方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: a = A()</span><br><span class="line">In [<span class="number">28</span>]: b = B()</span><br><span class="line">In [<span class="number">29</span>]: a.method()</span><br><span class="line">This <span class="keyword">is</span> a method <span class="keyword">from</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"><span class="title">In</span> [30]:</span> b.method()</span><br><span class="line">This <span class="keyword">is</span> a method <span class="keyword">from</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br></pre></td></tr></table></figure><br>在A中没有method方法，有的只是_A__method方法，也可以在外面直接调用，所以python中没有真正的私有化</p><h3 id="3）“xx”前后各双下划线"><a href="#3）“xx”前后各双下划线" class="headerlink" title="3）“xx”前后各双下划线"></a>3）“xx”前后各双下划线</h3><p>在特殊的情况下，它只是python调用的hook。例如，init()函数是当对象被创建初始化时调用的;new()是用来创建实例。<br>init #构造初始化函数,new之后运行<br>new #创建实例所需的属性<br>class #实例所在的类，实例.class<br>str #实例的字符串表示，可读性高<br>repr #实例的字符串表示，准确性高<br>del #删除实例引用<br>dict #实力自定义属性，vars(实例.dict)<br>doc #类文档，help(类或者实例)<br>bases #当前类的所有父类<br>getattribute #属性访问拦截器。</p><h2 id="4、map函数"><a href="#4、map函数" class="headerlink" title="4、map函数"></a>4、map函数</h2><p>map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line">map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure></p><h2 id="5、reduce函数"><a href="#5、reduce函数" class="headerlink" title="5、reduce函数"></a>5、reduce函数</h2><p>reduce这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="number">13579</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>向前走，向后走</title>
    <link href="http://yoursite.com/2020/08/21/%E5%90%91%E5%89%8D%E8%B5%B0%EF%BC%8C%E5%90%91%E5%90%8E%E8%B5%B0/"/>
    <id>http://yoursite.com/2020/08/21/%E5%90%91%E5%89%8D%E8%B5%B0%EF%BC%8C%E5%90%91%E5%90%8E%E8%B5%B0/</id>
    <published>2020-08-21T11:06:56.000Z</published>
    <updated>2020-10-11T12:54:50.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>很喜欢台湾作家几米画的单行本漫画《向左走，向右走》，文字中处处透露着温暖，插画清新自然，很舒服。</p><p>书中描绘着，在一座陌生的城市中，寂寞孤独的一对男女因为偶然一次缘分在公园相遇，互诉衷肠，两个落寞的心彼此感受着对方的温暖。然而，天空开始下着暴雨，俩人不得不分开，在临别前女生给男生留下写着电话的字条，就各自匆忙回家。不幸的是，字条由于雨水打湿而模糊了字迹，辨认不出号码。女生就这么焦急地等待男生的电话，而男生由于打湿字条而懊悔，满怀希望去公园等待，每次只能失望而归。时间缓缓流逝，又回到当初孤生一人的状态，生活仿佛又恢复了平静，只有他们自己知道，他们的心结了厚厚一层霜。生活在同个城市，两人有很多次机会相遇，但一人习惯向左，一人习惯向右，总是插肩而过，仿佛命运给他们开了无情的玩笑，注定无法相遇。又过了一段时间，女生打算离开这个让她伤心的城市。女生早早起床，把行李收拾好，打算在日出来临之时逃离这座城市，恰好遇上同样外出的男生。这一次，命运开始重新眷顾他们，在最重要的时刻他们重新相遇，那一刻，初升的阳光温柔地打在他们身上，暖暖的，融化了心里的霜。<br><img src= "/img/loading.gif" data-lazy-src="/img/left.jpg" alt="向左走，向右走"><br>这本书其实带给我很深的感动。以前在学校，身边总是围绕着很多东西，心里不觉得孤单，但等我真正走出社会，我才发现，在这钢筋水泥包裹着的城市，心慢慢开始学会忍受孤独。慢慢地开始习惯一个人，习惯一个人吃饭、一个人逛街、一个人看电影，一个人学会忍受孤独，内心开始慢慢封闭，终于我们会发现原来一个人也会慢慢习惯。</p><p>本书带给我的另一个感受是，人的一生会错过许许多多的人，有的人你会跟他相识相知，然后一别再也不见；有的人仅仅是打一个照面，就再也没有出现在你的世界中。每一天我们都在上演这离别戏码，可能是你身边的爱人和家人，也有可能是司机、路人、乘客。每次离别时，我们总以为还有机会再见，下次会有勇气把“我喜欢你”说给心底的那人听，但往往离别之后，再也无法遇见，未说出口的表白成为永久的遗憾。</p><p>一别之后，两地相悬，怎知说那三四载，谁知是一生憾事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>评分卡</title>
    <link href="http://yoursite.com/2020/08/21/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    <id>http://yoursite.com/2020/08/21/%E8%AF%84%E5%88%86%E5%8D%A1/</id>
    <published>2020-08-21T11:01:02.000Z</published>
    <updated>2020-08-21T11:24:42.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>评分卡分为A卡、B卡、C卡，在金融领域，A卡是利用最多的模型，尤其是银行，经常运用到贷前准入环节。它具有可解释性，模型稳定等各种优势。</p><p>得到评分卡的步骤如下：</p><h2 id="一、认清目标"><a href="#一、认清目标" class="headerlink" title="一、认清目标"></a>一、认清目标</h2><p>我们的目标是预测用户为好人的概率，并将概率转换成打分形式。分数越高表示用户的资质越好。</p><h2 id="二、数据清洗和数据加工"><a href="#二、数据清洗和数据加工" class="headerlink" title="二、数据清洗和数据加工"></a>二、数据清洗和数据加工</h2><p>将我们的非结构数据转化成结构化数据，连续数据转离散数据，去除异常值，标准化处理（最大最小值；正态标准化等）；<br>分箱操作就是将连续数据转成离散数据的方法之一。分箱的优势为：1、排除异常值的影响，例如：年龄为200岁；2、可以防止模型过拟合；3、为模型引入非线性，提高表达能力<br>分箱方法：</p><p>监督方法：卡方分箱法、IV最大化分箱法<br>无监督方法：k-means聚类、等频、等宽</p><h2 id="三、特征工程"><a href="#三、特征工程" class="headerlink" title="三、特征工程"></a>三、特征工程</h2><p>得到相对多的特征变量，在得到IV值之前，需要进行WOE，即特征转换。<br>之后分别计算IV值（information value），计算IV值。<br>根据IV值大小排列，IV值越高代表单个变量的可解释性越高。<br>得到比较重要的特征，取前topN特征代入线性回归中。<br>IV&lt;=0.02，没有解释性<br>0.1&lt;=IV&lt;0.02，具有较弱的解释性<br>0.3&lt;=IV&lt;=0.1，具有较强的解释性<br>0.3&lt;=IV，具有极强的解释性<br>一般来说，IV大于0.1时候，特征就可以保留下来。</p><h2 id="四、LR线性回归"><a href="#四、LR线性回归" class="headerlink" title="四、LR线性回归"></a>四、LR线性回归</h2><p>普通线性回归为：y = \beta_1x_1+\beta_2x_2+…+\beta_nx_n，而logistic回归是将普通线性回归映射到 [0,1] 范围内。<br>Logistic 函数为：f(x) = \frac{1}{1+e^-x}<br>假定P是用户为坏人的概率，则1-P是用户为好人的概率，P∈[0,1]。<br>P(y=1|x) = \frac{e^wx}{1+e^wx} ….. (1)<br>P(y=0|x) = \frac{1}{1+e^wx} ……(2)<br>则 ods = \frac{p}{1-p}，是坏人与好人的几率。令p=P(y=1|x)，则好人的概率为1-p<br>将公式1除以公式2可得，ln\frac{p}{1-p} = wx，令y= ln\frac{p}{1-p}<br>故 lny = w_1x_1+w_2x_2+…+w_nx_n</p><p>目标函数（损失函数）：<br>这里我们利用极大似然估计来得到logistic回归的损失函数：<br>L = \prod{I=1}{N}p^y_i+(1-p)^(1-y_i) ，<br>则lnL<br>= \sum{I=1}{N}ylnp+(1-)yln(1-p)<br>= \sum{I=1}{N}yln\frac{p}{1-p}+ln(1-p)<br>= \sum{I=1}{N}ywx+ln(\frac{1}{1+e^wx})</p><p>如何使损失函数最小化，这个时候就需要利用坐标下降法，来得到各个特征系数的值。</p><h2 id="五、得到评分卡"><a href="#五、得到评分卡" class="headerlink" title="五、得到评分卡"></a>五、得到评分卡</h2><p>在第四步，我们得到坏人的概率之后，就需要将概率转换成我们所需要的分数。<br>在得到分数之前，我们需要定义三个参数：</p><p>基准odds好坏比，即\frac{p}{1-p}<br>基准分数<br>PDO(points to Double the odds)：当odds增加两倍时，所减少的信用分<br>可以列式子：<br>Base_score = A - Bln(odds)<br>Base_score - PDO = A - Bln(2odds)<br>可以得到：A = base_score + frac{PDO}{ln(2)}*ln(odds)，B = frac{PDO}{ln(2)}<br>当我们希望信用分为600分时，对应的ods为1:50。当ods扩大为2:50时，信用分降低20分至580分(PDO=20)，可以求出AB的取值。<br>A=487.122 ，B=28.854</p><h2 id="六、模型评估"><a href="#六、模型评估" class="headerlink" title="六、模型评估"></a>六、模型评估</h2><p>详见《模型与策略评估》专栏。</p><h2 id="参考目录："><a href="#参考目录：" class="headerlink" title="参考目录："></a>参考目录：</h2><p>【1】《统计学习方法》-李航<br>【2】《机器学习》-周志华</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="评分卡" scheme="http://yoursite.com/tags/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    
      <category term="风控模型" scheme="http://yoursite.com/tags/%E9%A3%8E%E6%8E%A7%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>
